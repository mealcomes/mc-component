@use 'sass:map';

@use 'common/var' as *;
@use 'mixins/button' as *;
@use 'mixins/mixins' as *;
@use 'mixins/function.scss' as *;
@use 'mixins/var' as *;

$button-icon-span-gap: () !default;
$button-icon-span-gap: map.merge(
    (
        'large': 8px,
        'default': 6px,
        'small': 4px
    ),
    $button-icon-span-gap
);

@include b(button) {
    @include set-component-css-var('button', $button);
}

@include b(button) {
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;

    line-height: 1;
    height: map.get($input-height, 'default');
    white-space: nowrap;
    cursor: pointer;
    color: getCssVar('button', 'text-color');
    text-align: center;
    box-sizing: border-box;
    outline: none;
    transition: 0.1s;
    user-select: none;
    vertical-align: middle;
    background-color: getCssVar('button', 'bg-color');
    border: getCssVar('border');
    border-color: getCssVar('button', 'border-color');

    &:hover {
        color: getCssVar('button', 'hover', 'text-color');
        border-color: getCssVar('button', 'hover', 'border-color');
        background-color: getCssVar('button', 'hover', 'bg-color');
        outline: none;
    }

    &:active {
        color: getCssVar('button', 'active', 'text-color');
        border-color: getCssVar('button', 'active', 'border-color');
        background-color: getCssVar('button', 'active', 'bg-color');
        outline: none;
    }

    &:focus-visible {
        outline: 2px solid getCssVar('button', 'outline-color');
        outline-offset: 1px;
        transition: outline-offset 0s, outline 0s;
    }

    > span {
        display: inline-flex;
        align-items: center;

        & + [class*='#{$namespace}-icon'] {
            margin-left: map.get($button-icon-span-gap, 'default');
        }
    }

    & + & {
        margin-left: 12px;
    }

    & {
        @include button-size(
            map.get($button-padding-vertical, 'default') - $button-border-width,
            map.get($button-padding-horizontal, 'default') -
                $button-border-width,
            map.get($button-font-size, 'default'),
            map.get($button-border-radius, 'default')
        );
    }

    // icon 和文字之间的间距
    & [class*='#{$namespace}-icon'] {
        & + span {
            margin-left: map.get($button-icon-span-gap, 'default');
        }
        svg {
            vertical-align: bottom;
        }
    }

    @include when(active) {
        color: getCssVar('button', 'active', 'text-color');
        border-color: getCssVar('button', 'active', 'border-color');
        background-color: getCssVar('button', 'active', 'bg-color');
        outline: none;
    }

    @include when(disabled) {
        &,
        &:hover {
            color: getCssVar('button', 'disabled', 'text-color');
            cursor: not-allowed;
            background-image: none;
            background-color: getCssVar('button', 'disabled', 'bg-color');
            border-color: getCssVar('button', 'disabled', 'border-color');
        }
    }

    @include when(loading) {
        position: relative;
        pointer-events: none;

        &:before {
            content: '';
            z-index: 1;
            pointer-events: none;
            position: absolute;
            left: -1px;
            top: -1px;
            right: -1px;
            bottom: -1px;
            border-radius: inherit;
            background-color: getCssVar('mask-color', 'extra-light');
        }
    }
    @include when(round) {
        border-radius: getCssVar('border-radius', 'round');
    }

    // button 指定类型的样式(区别于theme-chalk)
    @each $type in (primary, success, warning, danger, info) {
        @include m($type) {
            @include button-variant($type);
        }
    }

    @each $size in (large, small) {
        @include m($size) {
            @include set-css-var-value(
                ('button', 'size'),
                map.get($input-height, $size)
            );

            height: getCssVar('button', 'size');

            & [class*='#{$namespace}-icon'] {
                & + span {
                    margin-left: map.get($button-icon-span-gap, $size);
                }
            }

            & {
                @include button-size(
                    map.get($button-padding-vertical, $size) -
                        $button-border-width,
                    map.get($button-padding-horizontal, $size) -
                        $button-border-width,
                    map.get($button-font-size, $size),
                    map.get($button-border-radius, $size)
                );
            }

            @include when(circle) {
                width: getCssVar('button', 'size');
                padding: map.get($button-padding-vertical, $size) -
                    $button-border-width;
            }
        }
    }
}
