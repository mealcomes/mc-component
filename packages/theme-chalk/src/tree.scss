@use 'mixins/mixins.scss' as *;
@use 'common/var.scss' as *;
@use 'mixins/function.scss' as *;
@use 'mixins/_var' as *;

@include b(tree) {
    @include set-component-css-var('tree', $tree);
}

@include b(tree) {
    position: relative;
    display: flex;
    flex-direction: column;
    background: getCssVar('fill-color', 'blank');
    color: getCssVar('tree-text-color');
    font-size: getCssVar('font-size', 'base');
    cursor: default;
}

@include b(tree-node) {
    display: flex;
    padding-bottom: 4px;
    background-clip: content-box;
    transition: background-color getCssVar('transition-duration-fast') ease-in;

    @include e('expand-icon') {
        display: inline-block;
        width: 24px;
        text-align: center;
        position: relative;
        cursor: pointer;
        color: getCssVar('tree-expand-icon-color');

        &.expanded {
            .#{$namespace}-tree-node__switcher {
                transform: translate(-50%, -50%) rotate(90deg);
            }
        }

        .#{$namespace}-tree-node__switcher {
            position: absolute;
            top: 50%;
            left: 50%;
            transition: transform getCssVar('transition-duration') ease-in-out;
            transform: translate(-50%, -50%);
        }

        &.is-leaf {
            color: transparent;
            cursor: default;
            visibility: hidden;
        }
    }

    @include e('content') {
        padding: 0 5px;
        border-radius: 5px;
        width: 100%;
        cursor: not-allowed;
        transition: background-color getCssVar('transition-duration-fast')
            ease-in;

        .#{$namespace}-tree-node:not(.is-disabled) & {
            cursor: pointer;
        }

        .#{$namespace}-tree-node:not(.is-selected, .is-multiple) & {
            &:hover {
                background-color: getCssVar('tree-node-hover-bg-color');
            }
        }
    }

    @include when(selected) {
        &:not(.is-multiple) {
            .#{$namespace}-tree-node__content {
                background-color: getCssVar('tree-selected-bg-color');
            }
        }
    }

    @include when(multiple) {
        &:not(.is-disabled, .is-selected):hover {
            background-color: getCssVar('tree-node-hover-bg-color');
        }
        @include when(selected) {
            background-color: getCssVar('tree-multiple-selected-bg-color');
        }
    }

    @include when(disabled) {
        .#{$namespace}-tree-node__content {
            color: getCssVar('tree-disabled-text-color');
            &:hover {
                background: none;
            }
        }
    }
}
